
///////////////// ADVANCED ACTIVITIES ///////////////////


// 1. Sum Array: Write a function sumArray that accepts an array of numbers and returns the sum of all elements.

function sumArray(arr) {
    // Create a function called sumArray
    // Include one parameter called arr
    // Use the reduce method on the array to sum all elements
    // Initialize the sum as 0 and add each element to the sum
    return arr.reduce(function(sum, num) {
        // Add each element (num) to the current sum
        return sum + num;
    }, 0);
}
// Running the function with an example input
console.log(sumArray([1, 2, 3, 4, 5])); // Output: 15

// 2. Reverse String: Implement a function reverseString that takes a string as input and returns its reverse.
function reverseString(str) {
    // Create a function called reverseString
    // Include one parameter called str
    // Split the string into an array of characters
    // Reverse the order of elements in the array
    // Join the reversed array back into a string
    return str.split('').reverse().join('');
}
// Running the function with an example input
console.log(reverseString("hello")); // Output: "olleh"

// 3. Find Maximum: Create a function findMax that receives an array of numbers and returns the largest number.
function findMax(arr) {
    // Create a function called findMax
    // Include one parameter called arr
    // Use Math.max to find the largest number
    // Spread the array elements into Math.max as arguments
    return Math.max.apply(null, arr);
}
// Running the function with an example input
console.log(findMax([1, 2, 3, 4, 5])); // Output: 5

// 4. Prime Check: Develop a function isPrime that takes a number and returns true if it is a prime number, else false.
function isPrime(num) {
    // Create a function called isPrime
    // Include one parameter called num
    // Check if the number is less than or equal to 1
    if (num <= 1) return false;
    // Loop from 2 to the square root of the number
    for (let i = 2; i <= Math.sqrt(num); i++) {
        // If the number is divisible by any number in the loop, it's not prime
        if (num % i === 0) return false;
    }
    // If no divisors are found, the number is prime
    return true;
}
// Running the function with an example input
console.log(isPrime(7)); // Output: true

// 5. Fibonacci Sequence: Write a function fibonacci that accepts a number n and returns the first n numbers of the Fibonacci sequence.
function fibonacci(n) {
    // Create a function called fibonacci
    // Include one parameter called n
    // Return an empty array if n is less than or equal to 0
    if (n <= 0) return [];
    // Return [0] if n is 1
    if (n === 1) return [0];
    // Initialize the Fibonacci sequence with the first two numbers
    var fibSeq = [0, 1];
    // Generate the Fibonacci sequence up to n numbers
    for (var i = 2; i < n; i++) {
        // Add the sum of the last two numbers to the sequence
        fibSeq.push(fibSeq[i - 1] + fibSeq[i - 2]);
    }
    // Return the Fibonacci sequence
    return fibSeq;
}
// Running the function with an example input
console.log(fibonacci(5)); // Output: [0, 1, 1, 2, 3]

// 6. Character Count: Craft a function countCharacter that takes a string and a character, and counts the number of occurrences of that character in the string.
function countCharacter(str, char) {
    // Create a function called countCharacter
    // Include two parameters called str and char
    // Split the string into an array of characters
    // Filter the array to count the occurrences of the character
    return str.split('').filter(function(c) {
        // Check if each character matches the input character
        return c === char;
    }).length;
}
// Running the function with an example input
console.log(countCharacter("hello world", 'l')); // Output: 3

// 7. Filter Evens: Design a function filterEvens that takes an array of numbers and filters out odd numbers, returning an array of only even numbers.
function filterEvens(arr) {
    // Create a function called filterEvens
    // Include one parameter called arr
    // Filter the array to include only even numbers
    return arr.filter(function(num) {
        // Check if the number is even
        return num % 2 === 0;
    });
}
// Running the function with an example input
console.log(filterEvens([1, 2, 3, 4, 5])); // Output: [2, 4]

// 8. Capitalize Words: Implement a function capitalizeWords that takes a string and capitalizes the first letter of each word in the string.
function capitalizeWords(str) {
    // Create a function called capitalizeWords
    // Include one parameter called str
    // Split the string into an array of words
    // Capitalize the first letter of each word
    // Join the array back into a string
    return str.split(' ').map(function(word) {
        // Capitalize the first letter of the word
        return word.charAt(0).toUpperCase() + word.slice(1);
    }).join(' ');
}
// Running the function with an example input
console.log(capitalizeWords("hello world")); // Output: "Hello World"

// 9. Longest Word: Develop a function findLongestWord that takes a string and returns the longest word within the string.
function findLongestWord(str) {
    // Create a function called findLongestWord
    // Include one parameter called str
    // Split the string into an array of words
    let words = str.split(' ');
    // Use reduce to find the longest word
    return words.reduce(function(longest, current) {
        // Compare the length of the current word with the longest word found
        return current.length > longest.length ? current : longest;
    }, "");
}
// Running the function with an example input
console.log(findLongestWord("The quick brown fox jumps over the lazy dog")); // Output: "jumps"

// 10. Sort Numbers: Create a function sortNumbers that takes an array of numbers and returns a new array with those numbers sorted in ascending order.
function sortNumbers(arr) {
    // Create a function called sortNumbers
    // Include one parameter called arr
    // Use the sort function to sort the array in ascending order
    return arr.slice().sort(function(a, b) {
        // Compare two numbers to determine their order
        return a - b;
    });
}
// Running the function with an example input
console.log(sortNumbers([3, 1, 4, 1, 5, 9])); // Output: [1, 1, 3, 4, 5, 9]
 
